// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: expense/v1/expense.proto

package expensev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ysomad/financer/internal/gen/proto/expense/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_7_0

const (
	// ExpenseServiceName is the fully-qualified name of the ExpenseService service.
	ExpenseServiceName = "expense.v1.ExpenseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExpenseServiceFindExpenseProcedure is the fully-qualified name of the ExpenseService's
	// FindExpense RPC.
	ExpenseServiceFindExpenseProcedure = "/expense.v1.ExpenseService/FindExpense"
	// ExpenseServiceDeclareExpenseProcedure is the fully-qualified name of the ExpenseService's
	// DeclareExpense RPC.
	ExpenseServiceDeclareExpenseProcedure = "/expense.v1.ExpenseService/DeclareExpense"
	// ExpenseServiceListExpensesProcedure is the fully-qualified name of the ExpenseService's
	// ListExpenses RPC.
	ExpenseServiceListExpensesProcedure = "/expense.v1.ExpenseService/ListExpenses"
	// ExpenseServiceDeleteExpenseProcedure is the fully-qualified name of the ExpenseService's
	// DeleteExpense RPC.
	ExpenseServiceDeleteExpenseProcedure = "/expense.v1.ExpenseService/DeleteExpense"
	// ExpenseServiceUpdateExpenseProcedure is the fully-qualified name of the ExpenseService's
	// UpdateExpense RPC.
	ExpenseServiceUpdateExpenseProcedure = "/expense.v1.ExpenseService/UpdateExpense"
)

// ExpenseServiceClient is a client for the expense.v1.ExpenseService service.
type ExpenseServiceClient interface {
	FindExpense(context.Context, *connect.Request[v1.FindExpenseRequest]) (*connect.Response[v1.Expense], error)
	DeclareExpense(context.Context, *connect.Request[v1.DeclareExpenseRequest]) (*connect.Response[v1.Expense], error)
	ListExpenses(context.Context, *connect.Request[v1.ListExpensesRequest]) (*connect.Response[v1.ListExpensesResponse], error)
	DeleteExpense(context.Context, *connect.Request[v1.DeleteExpenseRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateExpense(context.Context, *connect.Request[v1.UpdateExpenseRequest]) (*connect.Response[v1.Expense], error)
}

// NewExpenseServiceClient constructs a client for the expense.v1.ExpenseService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExpenseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExpenseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &expenseServiceClient{
		findExpense: connect.NewClient[v1.FindExpenseRequest, v1.Expense](
			httpClient,
			baseURL+ExpenseServiceFindExpenseProcedure,
			opts...,
		),
		declareExpense: connect.NewClient[v1.DeclareExpenseRequest, v1.Expense](
			httpClient,
			baseURL+ExpenseServiceDeclareExpenseProcedure,
			opts...,
		),
		listExpenses: connect.NewClient[v1.ListExpensesRequest, v1.ListExpensesResponse](
			httpClient,
			baseURL+ExpenseServiceListExpensesProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteExpense: connect.NewClient[v1.DeleteExpenseRequest, emptypb.Empty](
			httpClient,
			baseURL+ExpenseServiceDeleteExpenseProcedure,
			opts...,
		),
		updateExpense: connect.NewClient[v1.UpdateExpenseRequest, v1.Expense](
			httpClient,
			baseURL+ExpenseServiceUpdateExpenseProcedure,
			opts...,
		),
	}
}

// expenseServiceClient implements ExpenseServiceClient.
type expenseServiceClient struct {
	findExpense    *connect.Client[v1.FindExpenseRequest, v1.Expense]
	declareExpense *connect.Client[v1.DeclareExpenseRequest, v1.Expense]
	listExpenses   *connect.Client[v1.ListExpensesRequest, v1.ListExpensesResponse]
	deleteExpense  *connect.Client[v1.DeleteExpenseRequest, emptypb.Empty]
	updateExpense  *connect.Client[v1.UpdateExpenseRequest, v1.Expense]
}

// FindExpense calls expense.v1.ExpenseService.FindExpense.
func (c *expenseServiceClient) FindExpense(ctx context.Context, req *connect.Request[v1.FindExpenseRequest]) (*connect.Response[v1.Expense], error) {
	return c.findExpense.CallUnary(ctx, req)
}

// DeclareExpense calls expense.v1.ExpenseService.DeclareExpense.
func (c *expenseServiceClient) DeclareExpense(ctx context.Context, req *connect.Request[v1.DeclareExpenseRequest]) (*connect.Response[v1.Expense], error) {
	return c.declareExpense.CallUnary(ctx, req)
}

// ListExpenses calls expense.v1.ExpenseService.ListExpenses.
func (c *expenseServiceClient) ListExpenses(ctx context.Context, req *connect.Request[v1.ListExpensesRequest]) (*connect.Response[v1.ListExpensesResponse], error) {
	return c.listExpenses.CallUnary(ctx, req)
}

// DeleteExpense calls expense.v1.ExpenseService.DeleteExpense.
func (c *expenseServiceClient) DeleteExpense(ctx context.Context, req *connect.Request[v1.DeleteExpenseRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteExpense.CallUnary(ctx, req)
}

// UpdateExpense calls expense.v1.ExpenseService.UpdateExpense.
func (c *expenseServiceClient) UpdateExpense(ctx context.Context, req *connect.Request[v1.UpdateExpenseRequest]) (*connect.Response[v1.Expense], error) {
	return c.updateExpense.CallUnary(ctx, req)
}

// ExpenseServiceHandler is an implementation of the expense.v1.ExpenseService service.
type ExpenseServiceHandler interface {
	FindExpense(context.Context, *connect.Request[v1.FindExpenseRequest]) (*connect.Response[v1.Expense], error)
	DeclareExpense(context.Context, *connect.Request[v1.DeclareExpenseRequest]) (*connect.Response[v1.Expense], error)
	ListExpenses(context.Context, *connect.Request[v1.ListExpensesRequest]) (*connect.Response[v1.ListExpensesResponse], error)
	DeleteExpense(context.Context, *connect.Request[v1.DeleteExpenseRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateExpense(context.Context, *connect.Request[v1.UpdateExpenseRequest]) (*connect.Response[v1.Expense], error)
}

// NewExpenseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExpenseServiceHandler(svc ExpenseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	expenseServiceFindExpenseHandler := connect.NewUnaryHandler(
		ExpenseServiceFindExpenseProcedure,
		svc.FindExpense,
		opts...,
	)
	expenseServiceDeclareExpenseHandler := connect.NewUnaryHandler(
		ExpenseServiceDeclareExpenseProcedure,
		svc.DeclareExpense,
		opts...,
	)
	expenseServiceListExpensesHandler := connect.NewUnaryHandler(
		ExpenseServiceListExpensesProcedure,
		svc.ListExpenses,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	expenseServiceDeleteExpenseHandler := connect.NewUnaryHandler(
		ExpenseServiceDeleteExpenseProcedure,
		svc.DeleteExpense,
		opts...,
	)
	expenseServiceUpdateExpenseHandler := connect.NewUnaryHandler(
		ExpenseServiceUpdateExpenseProcedure,
		svc.UpdateExpense,
		opts...,
	)
	return "/expense.v1.ExpenseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExpenseServiceFindExpenseProcedure:
			expenseServiceFindExpenseHandler.ServeHTTP(w, r)
		case ExpenseServiceDeclareExpenseProcedure:
			expenseServiceDeclareExpenseHandler.ServeHTTP(w, r)
		case ExpenseServiceListExpensesProcedure:
			expenseServiceListExpensesHandler.ServeHTTP(w, r)
		case ExpenseServiceDeleteExpenseProcedure:
			expenseServiceDeleteExpenseHandler.ServeHTTP(w, r)
		case ExpenseServiceUpdateExpenseProcedure:
			expenseServiceUpdateExpenseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExpenseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExpenseServiceHandler struct{}

func (UnimplementedExpenseServiceHandler) FindExpense(context.Context, *connect.Request[v1.FindExpenseRequest]) (*connect.Response[v1.Expense], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("expense.v1.ExpenseService.FindExpense is not implemented"))
}

func (UnimplementedExpenseServiceHandler) DeclareExpense(context.Context, *connect.Request[v1.DeclareExpenseRequest]) (*connect.Response[v1.Expense], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("expense.v1.ExpenseService.DeclareExpense is not implemented"))
}

func (UnimplementedExpenseServiceHandler) ListExpenses(context.Context, *connect.Request[v1.ListExpensesRequest]) (*connect.Response[v1.ListExpensesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("expense.v1.ExpenseService.ListExpenses is not implemented"))
}

func (UnimplementedExpenseServiceHandler) DeleteExpense(context.Context, *connect.Request[v1.DeleteExpenseRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("expense.v1.ExpenseService.DeleteExpense is not implemented"))
}

func (UnimplementedExpenseServiceHandler) UpdateExpense(context.Context, *connect.Request[v1.UpdateExpenseRequest]) (*connect.Response[v1.Expense], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("expense.v1.ExpenseService.UpdateExpense is not implemented"))
}
