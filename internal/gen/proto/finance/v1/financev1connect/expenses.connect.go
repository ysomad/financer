// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: finance/v1/expenses.proto

package financev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ysomad/financer/internal/gen/proto/finance/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ExpenseServiceName is the fully-qualified name of the ExpenseService service.
	ExpenseServiceName = "finance.v1.ExpenseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExpenseServiceReportExpenseProcedure is the fully-qualified name of the ExpenseService's
	// ReportExpense RPC.
	ExpenseServiceReportExpenseProcedure = "/finance.v1.ExpenseService/ReportExpense"
)

// ExpenseServiceClient is a client for the finance.v1.ExpenseService service.
type ExpenseServiceClient interface {
	ReportExpense(context.Context, *connect.Request[v1.ReportExpenseRequest]) (*connect.Response[v1.ReportExpenseResponse], error)
}

// NewExpenseServiceClient constructs a client for the finance.v1.ExpenseService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExpenseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExpenseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &expenseServiceClient{
		reportExpense: connect.NewClient[v1.ReportExpenseRequest, v1.ReportExpenseResponse](
			httpClient,
			baseURL+ExpenseServiceReportExpenseProcedure,
			opts...,
		),
	}
}

// expenseServiceClient implements ExpenseServiceClient.
type expenseServiceClient struct {
	reportExpense *connect.Client[v1.ReportExpenseRequest, v1.ReportExpenseResponse]
}

// ReportExpense calls finance.v1.ExpenseService.ReportExpense.
func (c *expenseServiceClient) ReportExpense(ctx context.Context, req *connect.Request[v1.ReportExpenseRequest]) (*connect.Response[v1.ReportExpenseResponse], error) {
	return c.reportExpense.CallUnary(ctx, req)
}

// ExpenseServiceHandler is an implementation of the finance.v1.ExpenseService service.
type ExpenseServiceHandler interface {
	ReportExpense(context.Context, *connect.Request[v1.ReportExpenseRequest]) (*connect.Response[v1.ReportExpenseResponse], error)
}

// NewExpenseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExpenseServiceHandler(svc ExpenseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	expenseServiceReportExpenseHandler := connect.NewUnaryHandler(
		ExpenseServiceReportExpenseProcedure,
		svc.ReportExpense,
		opts...,
	)
	return "/finance.v1.ExpenseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExpenseServiceReportExpenseProcedure:
			expenseServiceReportExpenseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExpenseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExpenseServiceHandler struct{}

func (UnimplementedExpenseServiceHandler) ReportExpense(context.Context, *connect.Request[v1.ReportExpenseRequest]) (*connect.Response[v1.ReportExpenseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("finance.v1.ExpenseService.ReportExpense is not implemented"))
}
