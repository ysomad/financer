// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: telegram/v1/traits.proto

package telegramv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ysomad/financer/internal/gen/proto/telegram/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_7_0

const (
	// IdentityTraitsServiceName is the fully-qualified name of the IdentityTraitsService service.
	IdentityTraitsServiceName = "telegram.v1.IdentityTraitsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IdentityTraitsServiceGetIdentityTraitsProcedure is the fully-qualified name of the
	// IdentityTraitsService's GetIdentityTraits RPC.
	IdentityTraitsServiceGetIdentityTraitsProcedure = "/telegram.v1.IdentityTraitsService/GetIdentityTraits"
	// IdentityTraitsServiceUpdateIdentityTraitsProcedure is the fully-qualified name of the
	// IdentityTraitsService's UpdateIdentityTraits RPC.
	IdentityTraitsServiceUpdateIdentityTraitsProcedure = "/telegram.v1.IdentityTraitsService/UpdateIdentityTraits"
)

// IdentityTraitsServiceClient is a client for the telegram.v1.IdentityTraitsService service.
type IdentityTraitsServiceClient interface {
	GetIdentityTraits(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.IdentityTraits], error)
	UpdateIdentityTraits(context.Context, *connect.Request[v1.UpdateIdentityTraitsRequest]) (*connect.Response[v1.IdentityTraits], error)
}

// NewIdentityTraitsServiceClient constructs a client for the telegram.v1.IdentityTraitsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIdentityTraitsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IdentityTraitsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &identityTraitsServiceClient{
		getIdentityTraits: connect.NewClient[emptypb.Empty, v1.IdentityTraits](
			httpClient,
			baseURL+IdentityTraitsServiceGetIdentityTraitsProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateIdentityTraits: connect.NewClient[v1.UpdateIdentityTraitsRequest, v1.IdentityTraits](
			httpClient,
			baseURL+IdentityTraitsServiceUpdateIdentityTraitsProcedure,
			opts...,
		),
	}
}

// identityTraitsServiceClient implements IdentityTraitsServiceClient.
type identityTraitsServiceClient struct {
	getIdentityTraits    *connect.Client[emptypb.Empty, v1.IdentityTraits]
	updateIdentityTraits *connect.Client[v1.UpdateIdentityTraitsRequest, v1.IdentityTraits]
}

// GetIdentityTraits calls telegram.v1.IdentityTraitsService.GetIdentityTraits.
func (c *identityTraitsServiceClient) GetIdentityTraits(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.IdentityTraits], error) {
	return c.getIdentityTraits.CallUnary(ctx, req)
}

// UpdateIdentityTraits calls telegram.v1.IdentityTraitsService.UpdateIdentityTraits.
func (c *identityTraitsServiceClient) UpdateIdentityTraits(ctx context.Context, req *connect.Request[v1.UpdateIdentityTraitsRequest]) (*connect.Response[v1.IdentityTraits], error) {
	return c.updateIdentityTraits.CallUnary(ctx, req)
}

// IdentityTraitsServiceHandler is an implementation of the telegram.v1.IdentityTraitsService
// service.
type IdentityTraitsServiceHandler interface {
	GetIdentityTraits(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.IdentityTraits], error)
	UpdateIdentityTraits(context.Context, *connect.Request[v1.UpdateIdentityTraitsRequest]) (*connect.Response[v1.IdentityTraits], error)
}

// NewIdentityTraitsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIdentityTraitsServiceHandler(svc IdentityTraitsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	identityTraitsServiceGetIdentityTraitsHandler := connect.NewUnaryHandler(
		IdentityTraitsServiceGetIdentityTraitsProcedure,
		svc.GetIdentityTraits,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	identityTraitsServiceUpdateIdentityTraitsHandler := connect.NewUnaryHandler(
		IdentityTraitsServiceUpdateIdentityTraitsProcedure,
		svc.UpdateIdentityTraits,
		opts...,
	)
	return "/telegram.v1.IdentityTraitsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IdentityTraitsServiceGetIdentityTraitsProcedure:
			identityTraitsServiceGetIdentityTraitsHandler.ServeHTTP(w, r)
		case IdentityTraitsServiceUpdateIdentityTraitsProcedure:
			identityTraitsServiceUpdateIdentityTraitsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIdentityTraitsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIdentityTraitsServiceHandler struct{}

func (UnimplementedIdentityTraitsServiceHandler) GetIdentityTraits(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.IdentityTraits], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("telegram.v1.IdentityTraitsService.GetIdentityTraits is not implemented"))
}

func (UnimplementedIdentityTraitsServiceHandler) UpdateIdentityTraits(context.Context, *connect.Request[v1.UpdateIdentityTraitsRequest]) (*connect.Response[v1.IdentityTraits], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("telegram.v1.IdentityTraitsService.UpdateIdentityTraits is not implemented"))
}
